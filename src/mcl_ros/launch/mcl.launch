<!-- mcl.launch -->
<launch >
    <!-- ROS parameters -->

    <!-- Node name -->
    <arg name="node_name" default="mcl" />

    <!-- Input messages -->
    <arg name="scan_name" default="/scan" /> <!-- sensor_msgs::LaserScan -->
    <arg name="odom_name" default="/odom" /> <!-- nav_msgs::Odometry -->
    <arg name="map_name" default="/map" /> <!-- nav_msgs::OccupancyGrid -->

    <!-- Output messages -->
    <arg name="pose_name" default="/mcl_pose" /> <!-- geometry_msgs::PoseStamped -->
    <arg name="particles_name" default="/mcl_particles" /> <!-- geometry_msgs::PoseArray -->
    <arg name="unknown_scan_name" default="/unknown_scan" /> <!-- sensor_msgs::LaserScan -->
    <arg name="residual_errors_name" default="/residual_errors" /> <!-- sensor_msgs::LaserScan -->

    <!-- TF frames -->
    <arg name="laser_frame" default="/laser" />
    <arg name="base_link_frame" default="/base_link" />
    <arg name="map_frame" default="/map" />
    <arg name="odom_frame" default="/odom" />
    <arg name="use_odom_frame" default="true" />
    <!-- If use_ofom_frame is true, MCL estimates the base link pose on the odometry frame.
         E.g., the tf tree will be "/map -> /odom -> /base_link -> /laser"
         If not, MCL directly estimates the base link pose on the map frame.
         E.g., the tf tree will be "/map -> /base_link -> /laser"
         If you just want to use localization, i.e., do not consider navigation in the odom frame,
         use_odom_frame = false is recommended. -->





    <!-- MCL parameters -->

    <!-- 0: likelihood field model, 1, beam model, 2: class conditional measurement model
         The class conditional measurement model is highly recommended for the position tracking. -->
    <arg name="measurement_model_type" default="2" />

    <!-- Numbers of particles
         In this MCL package, the numbers of the particles are constant. -->
    <arg name="particle_num" default="100" />

    <!-- If use_augmented_mcl is true, augmented MCL is used.
         Augmented MCL adds random particles when doing resampling if MCL might fail localization.
         alpha_slow and alpha_fast are parameters for augmented MCL (0 < alpha_slow << alpha_fast < 1).
         If add_random_particles_in_resampling is true, random particles are also added in resampling.
         (random_particles_rate * particle_num) particles are added
         if add_random_particles_in_resampling is true. -->
    <arg name="use_augmented_mcl" default="false" />
    <arg name="alpha_slow" default="0.001" />
    <arg name="alpha_fast" default="0.99" />
    <arg name="add_random_particles_in_resampling" default="true" />
    <arg name="random_particles_rate" default="0.1" />

    <!--If use_omni_directional_model is true, the omnidirectional motion model is used.
        A default motion model is the differential drive model. -->
    <arg name="use_omni_directional_model" default="false" />

    <!-- If reject_unknown_scan is true,
         scans that might measure unknown obstacles are rejected before likelihood calculation.
         The scan rejection will perform when the likelihood field or beam models is used.
         If publish_unknown_scan is true, the rejected scan is published.
         unknown_scan_prob_threshold included from 0 to 1 is a threshold to reject the unknown scan. -->
    <arg name="reject_unknown_scan" default="true" />
    <arg name="publish_unknown_scan" default="true" />
    <arg name="unknown_scan_prob_threshold" default="0.9" />

    <!-- If publish_residual_errors is true,
         the residual errors from the estimated pose will be published. -->
    <arg name="publish_residual_errors" default="true" />

    <!-- Dense measurements must not be used for localization. 
         You can control how much measurements are skipped by scan_step.
         scan_step must be larger than 0.
         E.e., if you use Hokuyo LiDAR TOP-URG, it can measure 1081 points
         and scan_step = 10 or 5 is recommended. -->
    <arg name="scan_step" default="10" />

    <!-- The measurement models' parameters
         The sum of z_hit, z_max, and z_rand must be 1
         when the likelihood field and class coditional measurment models are used. 
         The sum of z_hit, z_short, z_max, and z_rand must be 1 when the beam model is used. -->
    <arg name="z_hit" default="0.9" />
    <arg name="z_short" default="0.2" />
    <arg name="z_max" default="0.05" />
    <arg name="z_rand" default="0.05" />
    <arg name="var_hit" default="0.04" />
    <arg name="lambda_short" default="1.0" />
    <arg name="lambda_unknown" default="0.01" />

    <!-- A parameter for the class conditional measurement model. 0.5 is recommended. -->
    <arg name="known_class_prior" default="0.5" />

    <!-- If rate of the effective sample size is less than resample_threshold_ess,
         resampling will be performed. -->
    <arg name="resample_threshold_ess" default="0.5" />

    <!-- localization Hz -->
    <arg name="localization_hz" default="10.0" />

    <!-- Initial pose (x [m], y [m], yaw [deg]) -->
    <rosparam param="/$(arg node_name)/initial_pose" > [0.0, 0.0, 0.0] </rosparam >

    <!-- Parameters used for determining initial particles distribution (x, y, yaw) -->
    <rosparam param="/$(arg node_name)/initial_noise" > [0.2, 0.2, 0.02] </rosparam >

    <!-- Parameters used for randam particles in resampling (x, y, yaw).
         These parameters are used when use_augmented_mcl or add_random_particles_in_resampling is true. -->
    <rosparam param="/$(arg node_name)/random_particles_noise" > [0.1, 0.1, 0.01] </rosparam >

    <!-- Motion noises -->
    <rosparam param="/$(arg node_name)/odom_noise_ddm" > [1.0, 0.5, 0.5, 1.0] </rosparam >
    <rosparam param="/$(arg node_name)/odom_noise_odm" > [1.0, 0.5, 0.5, 0.5, 1.0, 0.5, 0.5, 0.5, 1.0] </rosparam >

    <!-- Resampling thresholds to delta x, y, distance, yaw, and time, respectively. 
         If all parameters are set to minus, these thresholds are ignored. -->
    <rosparam param="/$(arg node_name)/resample_thresholds" > [0.2, 0.2, 0.2, 0.02, 100000000.0] </rosparam >




    <!-- include tf and map server -->
<!--
    <include file="$(find mcl_ros)/launch/robot_tf.launch" >
        <arg name="laser_frame" value="$(arg laser_frame)" />
        <arg name="base_link_frame" value="$(arg base_link_frame)" />
    </include >

    <include file="$(find mcl_ros)/launch/map_server.launch" >
        <arg name="map_name" value="$(arg map_name)" />
    </include >
 -->




    <!-- MCL node -->
    <node name="$(arg node_name)" pkg="mcl_ros" type="mcl" output="screen" >
        <param name="/measurement_model_type" value="$(arg measurement_model_type)" type="int" />

        <param name="/scan_name" value="$(arg scan_name)" type="string" />
        <param name="/odom_name" value="$(arg odom_name)" type="string" />
        <param name="/map_name" value="$(arg map_name)" type="string" />
        <param name="/pose_name" value="$(arg pose_name)" type="string" />
        <param name="/particles_name" value="$(arg particles_name)" type="string" />
        <param name="/unknown_scan_name" value="$(arg unknown_scan_name)" type="string" />
        <param name="/residual_errors_name" value="$(arg residual_errors_name)" type="string" />

        <param name="/laser_frame" value="$(arg laser_frame)" type="string" />
        <param name="/base_link_frame" value="$(arg base_link_frame)" type="string" />
        <param name="/map_frame" value="$(arg map_frame)" type="string" />
        <param name="/odom_frame" value="$(arg odom_frame)" type="string" />
        <param name="/use_odom_frame" value="$(arg use_odom_frame)" type="bool" />

        <param name="/particle_num" value="$(arg particle_num)" type="int" />

        <param name="/use_augmented_mcl" value="$(arg use_augmented_mcl)" tpye="bool" />
        <param name="/alpha_slow" value="$(arg alpha_slow)" type="double" />
        <param name="/alpha_fast" value="$(arg alpha_fast)" type="double" />
        <param name="/add_random_particles_in_resampling" value="$(arg add_random_particles_in_resampling)" type="bool" />
        <param name="/random_particles_rate" value="$(arg random_particles_rate)" type="double" />

        <param name="/use_omni_directional_model" value="$(arg use_omni_directional_model)" type="bool" />

        <param name="/reject_unknown_scan" value="$(arg reject_unknown_scan)" type="bool" />
        <param name="/publish_unknown_scan" value="$(arg publish_unknown_scan)" type="bool" />
        <param name="/unknown_scan_prob_threshold" value="$(arg unknown_scan_prob_threshold)" type="double" />

        <param name="/publish_residual_errors" value="$(arg publish_residual_errors)" tpye="bool" />

        <param name="/scan_step" value="$(arg scan_step)" type="int" />

        <param name="/z_hit" value="$(arg z_hit)" type="double" />
        <param name="/z_short" value="$(arg z_short)" type="double" />
        <param name="/z_max" value="$(arg z_max)" type="double" />
        <param name="/z_rand" value="$(arg z_rand)" type="double" />
        <param name="/var_hit" value="$(arg var_hit)" type="double" />
        <param name="/lambda_short" value="$(arg lambda_short)" type="double" />
        <param name="/lambda_unknown" value="$(arg lambda_unknown)" type="double" />

        <param name="/known_class_prior" value="$(arg known_class_prior)" type="double" />

        <param name="/resample_threshold_ess" value="$(arg resample_threshold_ess)" type="double" />

        <param name="/localization_hz" value="$(arg localization_hz)" type="double" />
    </node >
</launch >
